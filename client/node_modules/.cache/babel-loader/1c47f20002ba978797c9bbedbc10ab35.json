{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sebastiancevallos/Desktop/School/UCLA/Winter 2023/CS 35L/cs35l_project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Users/sebastiancevallos/Desktop/School/UCLA/Winter 2023/CS 35L/cs35l_project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/sebastiancevallos/Desktop/School/UCLA/Winter 2023/CS 35L/cs35l_project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __export = function __export(target, all) {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = function __copyProps(to, from, except, desc) {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropNames(from)),\n      _step2;\n    try {\n      var _loop = function _loop() {\n        var key = _step2.value;\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: function get() {\n            return from[key];\n          },\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return to;\n};\nvar __toCommonJS = function __toCommonJS(mod) {\n  return __copyProps(__defProp({}, \"__esModule\", {\n    value: true\n  }), mod);\n};\n\n// src/ApiCalendar.ts\nvar ApiCalendar_exports = {};\n__export(ApiCalendar_exports, {\n  default: function _default() {\n    return ApiCalendar_default;\n  }\n});\nmodule.exports = __toCommonJS(ApiCalendar_exports);\nvar scriptSrcGoogle = \"https://accounts.google.com/gsi/client\";\nvar scriptSrcGapi = \"https://apis.google.com/js/api.js\";\nvar ApiCalendar = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ApiCalendar(config) {\n    _classCallCheck(this, ApiCalendar);\n    this.config = config;\n    this.tokenClient = null;\n    this.onLoadCallback = null;\n    this.calendar = \"primary\";\n    try {\n      this.initGapiClient = this.initGapiClient.bind(this);\n      this.handleSignoutClick = this.handleSignoutClick.bind(this);\n      this.handleAuthClick = this.handleAuthClick.bind(this);\n      this.createEvent = this.createEvent.bind(this);\n      this.listUpcomingEvents = this.listUpcomingEvents.bind(this);\n      this.listEvents = this.listEvents.bind(this);\n      this.createEventFromNow = this.createEventFromNow.bind(this);\n      this.onLoad = this.onLoad.bind(this);\n      this.setCalendar = this.setCalendar.bind(this);\n      this.updateEvent = this.updateEvent.bind(this);\n      this.deleteEvent = this.deleteEvent.bind(this);\n      this.getEvent = this.getEvent.bind(this);\n      this.handleClientLoad();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  _createClass(ApiCalendar, [{\n    key: \"initGapiClient\",\n    value: function initGapiClient() {\n      var _this = this;\n      gapi.client.init({\n        apiKey: this.config.apiKey,\n        discoveryDocs: this.config.discoveryDocs,\n        hosted_domain: this.config.hosted_domain\n      }).then(function () {\n        if (_this.onLoadCallback) {\n          _this.onLoadCallback();\n        }\n      }).catch(function (e) {\n        console.log(e);\n      });\n    }\n  }, {\n    key: \"handleClientLoad\",\n    value: function handleClientLoad() {\n      var _this2 = this;\n      var scriptGoogle = document.createElement(\"script\");\n      var scriptGapi = document.createElement(\"script\");\n      scriptGoogle.src = scriptSrcGoogle;\n      scriptGoogle.async = true;\n      scriptGoogle.defer = true;\n      scriptGapi.src = scriptSrcGapi;\n      scriptGapi.async = true;\n      scriptGapi.defer = true;\n      document.body.appendChild(scriptGapi);\n      document.body.appendChild(scriptGoogle);\n      scriptGapi.onload = function () {\n        gapi.load(\"client\", _this2.initGapiClient);\n      };\n      scriptGoogle.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return google.accounts.oauth2.initTokenClient({\n                client_id: _this2.config.clientId,\n                scope: _this2.config.scope,\n                prompt: \"\",\n                callback: function callback() {}\n              });\n            case 2:\n              _this2.tokenClient = _context.sent;\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"handleAuthClick\",\n    value: function handleAuthClick() {\n      if (gapi && this.tokenClient) {\n        if (gapi.client.getToken() === null) {\n          this.tokenClient.requestAccessToken({\n            prompt: \"consent\"\n          });\n        } else {\n          this.tokenClient.requestAccessToken({\n            prompt: \"\"\n          });\n        }\n      } else {\n        console.error(\"Error: this.gapi not loaded\");\n        new Error(\"Error: this.gapi not loaded\");\n      }\n    }\n  }, {\n    key: \"setCalendar\",\n    value: function setCalendar(newCalendar) {\n      this.calendar = newCalendar;\n    }\n  }, {\n    key: \"onLoad\",\n    value: function onLoad(callback) {\n      if (gapi) {\n        callback();\n      } else {\n        this.onLoadCallback = callback;\n      }\n    }\n  }, {\n    key: \"handleSignoutClick\",\n    value: function handleSignoutClick() {\n      if (gapi) {\n        var token = gapi.client.getToken();\n        if (token !== null) {\n          google.accounts.id.disableAutoSelect();\n          google.accounts.oauth2.revoke(token.access_token, function () {});\n          gapi.client.setToken(null);\n        }\n      } else {\n        console.error(\"Error: this.gapi not loaded\");\n      }\n    }\n  }, {\n    key: \"listUpcomingEvents\",\n    value: function listUpcomingEvents(maxResults) {\n      var calendarId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.calendar;\n      if (gapi) {\n        return gapi.client.calendar.events.list({\n          calendarId: calendarId,\n          timeMin: new Date().toISOString(),\n          showDeleted: false,\n          singleEvents: true,\n          maxResults: maxResults,\n          orderBy: \"startTime\"\n        });\n      } else {\n        console.error(\"Error: this.gapi not loaded\");\n        return false;\n      }\n    }\n  }, {\n    key: \"listEvents\",\n    value: function listEvents(queryOptions) {\n      var calendarId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.calendar;\n      if (gapi) {\n        return gapi.client.calendar.events.list(__spreadValues({\n          calendarId: calendarId\n        }, queryOptions));\n      } else {\n        console.error(\"Error: gapi not loaded\");\n        return false;\n      }\n    }\n  }, {\n    key: \"createEventFromNow\",\n    value: function createEventFromNow(_ref2) {\n      var time = _ref2.time,\n        summary = _ref2.summary,\n        _ref2$description = _ref2.description,\n        description = _ref2$description === void 0 ? \"\" : _ref2$description;\n      var calendarId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.calendar;\n      var timeZone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"Europe/Paris\";\n      var event = {\n        summary: summary,\n        description: description,\n        start: {\n          dateTime: new Date().toISOString(),\n          timeZone: timeZone\n        },\n        end: {\n          dateTime: new Date(new Date().getTime() + time * 6e4).toISOString(),\n          timeZone: timeZone\n        }\n      };\n      return this.createEvent(event, calendarId);\n    }\n  }, {\n    key: \"createEvent\",\n    value: function createEvent(event) {\n      var calendarId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.calendar;\n      var sendUpdates = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"none\";\n      if (gapi.client.getToken()) {\n        return gapi.client.calendar.events.insert({\n          calendarId: calendarId,\n          resource: event,\n          sendUpdates: sendUpdates\n        });\n      } else {\n        console.error(\"Error: this.gapi not loaded\");\n        return false;\n      }\n    }\n  }, {\n    key: \"deleteEvent\",\n    value: function deleteEvent(eventId) {\n      var calendarId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.calendar;\n      if (gapi) {\n        return gapi.client.calendar.events.delete({\n          calendarId: calendarId,\n          eventId: eventId\n        });\n      } else {\n        console.error(\"Error: gapi is not loaded use onLoad before please.\");\n        return null;\n      }\n    }\n  }, {\n    key: \"updateEvent\",\n    value: function updateEvent(event, eventId) {\n      var calendarId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.calendar;\n      var sendUpdates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"none\";\n      if (gapi) {\n        return gapi.client.calendar.events.patch({\n          calendarId: calendarId,\n          eventId: eventId,\n          resource: event,\n          sendUpdates: sendUpdates\n        });\n      } else {\n        console.error(\"Error: gapi is not loaded use onLoad before please.\");\n        return null;\n      }\n    }\n  }, {\n    key: \"getEvent\",\n    value: function getEvent(eventId) {\n      var calendarId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.calendar;\n      if (gapi) {\n        return gapi.client.calendar.events.get({\n          calendarId: calendarId,\n          eventId: eventId\n        });\n      } else {\n        console.error(\"Error: gapi is not loaded use onLoad before please.\");\n        return null;\n      }\n    }\n  }, {\n    key: \"listCalendars\",\n    value: function listCalendars() {\n      if (gapi) {\n        return gapi.client.calendar.calendarList.list();\n      } else {\n        console.error(\"Error: gapi is not loaded use onLoad before please.\");\n        return null;\n      }\n    }\n  }, {\n    key: \"createCalendar\",\n    value: function createCalendar(summary) {\n      if (gapi) {\n        return gapi.client.calendar.calendars.insert({\n          summary: summary\n        });\n      } else {\n        console.error(\"Error: gapi is not loaded use onLoad before please.\");\n        return null;\n      }\n    }\n  }, {\n    key: \"sign\",\n    get: function get() {\n      return !!this.tokenClient;\n    }\n  }]);\n  return ApiCalendar;\n}();\nvar ApiCalendar_default = ApiCalendar;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {});","map":null,"metadata":{},"sourceType":"script"}