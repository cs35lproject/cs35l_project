{"ast":null,"code":"var _jsxFileName = \"/Users/sebastiancevallos/Desktop/School/UCLA/Winter 2023/CS 35L/cs35l_project/client/src/pages/CalendarAPI.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ApiCalendar from 'react-google-calendar-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarAPI = () => {\n  _s();\n  const config = {\n    \"clientId\": \"832026479166-3i3nl2i2nngrpjer3rjoi85a18v4ufc0.apps.googleusercontent.com\",\n    \"apiKey\": \"AIzaSyD-rsdUh4BKKlvbkYvjJRJSVV1T-KiBXQE\",\n    \"scope\": \"https://www.googleapis.com/auth/calendar\",\n    // may need to instead be 'https://www.googleapis.com/auth/calendar.readonly'\n    \"discoveryDocs\": [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"]\n  };\n  const apiCalendar = new ApiCalendar(config);\n  const [promise, setPromise] = useState(0);\n  let tokenClient, gisInited, gapiInited;\n  useEffect(() => {\n    console.log(\"Loaded\");\n    gapi.client.init({\n      apiKey: API_KEY,\n      discoveryDocs: [DISCOVERY_DOC]\n    });\n    gapiInited = true;\n    tokenClient = google.accounts.oauth2.initTokenClient({\n      client_id: config.clientId,\n      scope: scope,\n      callback: '' // defined later\n    });\n\n    gisInited = true;\n  });\n  const authCal = () => {\n    //setPromise(apiCalendar.handleAuthClick());\n    tokenClient.callback = async resp => {\n      if (resp.error !== undefined) {\n        throw resp;\n      }\n      document.getElementById('signout_button').style.visibility = 'visible';\n      document.getElementById('authorize_button').innerText = 'Refresh';\n      await listUpcomingEvents();\n    };\n    if (gapi.client.getToken() === null) {\n      // Prompt the user to select a Google Account and ask for consent to share their data\n      // when establishing a new session.\n      tokenClient.requestAccessToken({\n        prompt: 'consent'\n      });\n    } else {\n      // Skip display of account chooser and consent dialog for an existing session.\n      tokenClient.requestAccessToken({\n        prompt: ''\n      });\n    }\n  };\n  const showEvents = () => {\n    console.log(\"Date:\", new Date().toISOString());\n    apiCalendar.listEvents({\n      timeMin: new Date().toISOString(),\n      timeMax: new Date().toISOString(),\n      showDeleted: true,\n      maxResults: 10,\n      orderBy: 'updated'\n    }).then(res => {\n      console.log(res);\n      console.log(res.items);\n    });\n  };\n  const showPromise = () => {\n    console.log(promise);\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/\",\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: authCal,\n      children: \"Authenticate Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: showPromise,\n      children: \"Show promise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: showEvents,\n      children: \"Show events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Auth promise: \", promise]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(CalendarAPI, \"27OAoJCRAtSP++7vzKLvvUlguyg=\");\n_c = CalendarAPI;\nexport default CalendarAPI;\nvar _c;\n$RefreshReg$(_c, \"CalendarAPI\");","map":{"version":3,"names":["React","useState","useEffect","ApiCalendar","CalendarAPI","config","apiCalendar","promise","setPromise","tokenClient","gisInited","gapiInited","console","log","gapi","client","init","apiKey","API_KEY","discoveryDocs","DISCOVERY_DOC","google","accounts","oauth2","initTokenClient","client_id","clientId","scope","callback","authCal","resp","error","undefined","document","getElementById","style","visibility","innerText","listUpcomingEvents","getToken","requestAccessToken","prompt","showEvents","Date","toISOString","listEvents","timeMin","timeMax","showDeleted","maxResults","orderBy","then","res","items","showPromise"],"sources":["/Users/sebastiancevallos/Desktop/School/UCLA/Winter 2023/CS 35L/cs35l_project/client/src/pages/CalendarAPI.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ApiCalendar from 'react-google-calendar-api';\n\nconst CalendarAPI = () => {\n    const config = {\n        \"clientId\": \"832026479166-3i3nl2i2nngrpjer3rjoi85a18v4ufc0.apps.googleusercontent.com\",\n        \"apiKey\": \"AIzaSyD-rsdUh4BKKlvbkYvjJRJSVV1T-KiBXQE\",\n        \"scope\": \"https://www.googleapis.com/auth/calendar\", // may need to instead be 'https://www.googleapis.com/auth/calendar.readonly'\n        \"discoveryDocs\": [\n          \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"\n        ]\n    }\n    \n    const apiCalendar = new ApiCalendar(config)\n\n    const [promise, setPromise] = useState(0);\n\n    let tokenClient, gisInited, gapiInited;\n\n    useEffect(() => {\n        console.log(\"Loaded\");\n\n        gapi.client.init({\n            apiKey: API_KEY,\n            discoveryDocs: [DISCOVERY_DOC],\n          });\n          gapiInited = true;\n\n        tokenClient = google.accounts.oauth2.initTokenClient({\n            client_id: config.clientId,\n            scope: scope,\n            callback: '', // defined later\n        });\n        gisInited = true;\n    });\n\n    const authCal = () => {\n        //setPromise(apiCalendar.handleAuthClick());\n        tokenClient.callback = async (resp) => {\n            if (resp.error !== undefined) {\n              throw (resp);\n            }\n            document.getElementById('signout_button').style.visibility = 'visible';\n            document.getElementById('authorize_button').innerText = 'Refresh';\n            await listUpcomingEvents();\n          };\n  \n          if (gapi.client.getToken() === null) {\n            // Prompt the user to select a Google Account and ask for consent to share their data\n            // when establishing a new session.\n            tokenClient.requestAccessToken({prompt: 'consent'});\n          } else {\n            // Skip display of account chooser and consent dialog for an existing session.\n            tokenClient.requestAccessToken({prompt: ''});\n          }\n    }\n\n    const showEvents = () => {\n        console.log(\"Date:\", (new Date()).toISOString())\n        apiCalendar.listEvents({\n            timeMin: new Date().toISOString(),\n            timeMax: (new Date()).toISOString(),\n            showDeleted: true,\n            maxResults: 10,\n            orderBy: 'updated'\n        }).then((res) => {\n            console.log(res);\n            console.log(res.items);\n        });\n    }\n\n    const showPromise = () => {\n        console.log(promise);\n    }\n\n    return (\n        <React.Fragment>\n            <a href=\"/\">Home</a>\n\n            <button onClick={authCal}>Authenticate Calendar</button>\n\n            <button onClick={showPromise}>Show promise</button>\n\n            <button onClick={showEvents}>Show events</button>\n\n            <p>Auth promise: {promise}</p>\n\n        </React.Fragment>\n    );\n}\n\nexport default CalendarAPI"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}